// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.alarmfm.radio.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class StationDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<StationDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("changeuuid", "stationuuid",
      "name", "url", "url_resolved", "homepage", "favicon", "tags", "country", "countrycode",
      "language", "votes", "codec", "bitrate", "lastcheckok", "lastchecktime", "lastcheckoktime",
      "clicktimestamp", "clickcount", "clicktrend")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "changeuuid")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "homepage")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "votes")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "lastcheckok")

  override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("StationDto").append(')') }

  override fun fromJson(reader: JsonReader): StationDto {
    var changeuuid: String? = null
    var stationuuid: String? = null
    var name: String? = null
    var url: String? = null
    var urlResolved: String? = null
    var homepage: String? = null
    var favicon: String? = null
    var tags: String? = null
    var country: String? = null
    var countrycode: String? = null
    var language: String? = null
    var votes: Int? = null
    var codec: String? = null
    var bitrate: Int? = null
    var lastcheckok: Boolean? = null
    var lastchecktime: String? = null
    var lastcheckoktime: String? = null
    var clicktimestamp: String? = null
    var clickcount: Int? = null
    var clicktrend: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> changeuuid = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("changeuuid",
            "changeuuid", reader)
        1 -> stationuuid = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("stationuuid", "stationuuid", reader)
        2 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        3 -> url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("url", "url", reader)
        4 -> urlResolved = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("urlResolved", "url_resolved", reader)
        5 -> homepage = nullableStringAdapter.fromJson(reader)
        6 -> favicon = nullableStringAdapter.fromJson(reader)
        7 -> tags = nullableStringAdapter.fromJson(reader)
        8 -> country = nullableStringAdapter.fromJson(reader)
        9 -> countrycode = nullableStringAdapter.fromJson(reader)
        10 -> language = nullableStringAdapter.fromJson(reader)
        11 -> votes = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("votes", "votes",
            reader)
        12 -> codec = nullableStringAdapter.fromJson(reader)
        13 -> bitrate = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("bitrate",
            "bitrate", reader)
        14 -> lastcheckok = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("lastcheckok", "lastcheckok", reader)
        15 -> lastchecktime = stringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("lastchecktime", "lastchecktime", reader)
        16 -> lastcheckoktime = nullableStringAdapter.fromJson(reader)
        17 -> clicktimestamp = nullableStringAdapter.fromJson(reader)
        18 -> clickcount = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("clickcount",
            "clickcount", reader)
        19 -> clicktrend = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("clicktrend",
            "clicktrend", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return StationDto(
        changeuuid = changeuuid ?: throw Util.missingProperty("changeuuid", "changeuuid", reader),
        stationuuid = stationuuid ?: throw Util.missingProperty("stationuuid", "stationuuid",
            reader),
        name = name ?: throw Util.missingProperty("name", "name", reader),
        url = url ?: throw Util.missingProperty("url", "url", reader),
        urlResolved = urlResolved ?: throw Util.missingProperty("urlResolved", "url_resolved",
            reader),
        homepage = homepage,
        favicon = favicon,
        tags = tags,
        country = country,
        countrycode = countrycode,
        language = language,
        votes = votes ?: throw Util.missingProperty("votes", "votes", reader),
        codec = codec,
        bitrate = bitrate ?: throw Util.missingProperty("bitrate", "bitrate", reader),
        lastcheckok = lastcheckok ?: throw Util.missingProperty("lastcheckok", "lastcheckok",
            reader),
        lastchecktime = lastchecktime ?: throw Util.missingProperty("lastchecktime",
            "lastchecktime", reader),
        lastcheckoktime = lastcheckoktime,
        clicktimestamp = clicktimestamp,
        clickcount = clickcount ?: throw Util.missingProperty("clickcount", "clickcount", reader),
        clicktrend = clicktrend ?: throw Util.missingProperty("clicktrend", "clicktrend", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: StationDto?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("changeuuid")
    stringAdapter.toJson(writer, value_.changeuuid)
    writer.name("stationuuid")
    stringAdapter.toJson(writer, value_.stationuuid)
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("url")
    stringAdapter.toJson(writer, value_.url)
    writer.name("url_resolved")
    stringAdapter.toJson(writer, value_.urlResolved)
    writer.name("homepage")
    nullableStringAdapter.toJson(writer, value_.homepage)
    writer.name("favicon")
    nullableStringAdapter.toJson(writer, value_.favicon)
    writer.name("tags")
    nullableStringAdapter.toJson(writer, value_.tags)
    writer.name("country")
    nullableStringAdapter.toJson(writer, value_.country)
    writer.name("countrycode")
    nullableStringAdapter.toJson(writer, value_.countrycode)
    writer.name("language")
    nullableStringAdapter.toJson(writer, value_.language)
    writer.name("votes")
    intAdapter.toJson(writer, value_.votes)
    writer.name("codec")
    nullableStringAdapter.toJson(writer, value_.codec)
    writer.name("bitrate")
    intAdapter.toJson(writer, value_.bitrate)
    writer.name("lastcheckok")
    booleanAdapter.toJson(writer, value_.lastcheckok)
    writer.name("lastchecktime")
    stringAdapter.toJson(writer, value_.lastchecktime)
    writer.name("lastcheckoktime")
    nullableStringAdapter.toJson(writer, value_.lastcheckoktime)
    writer.name("clicktimestamp")
    nullableStringAdapter.toJson(writer, value_.clicktimestamp)
    writer.name("clickcount")
    intAdapter.toJson(writer, value_.clickcount)
    writer.name("clicktrend")
    intAdapter.toJson(writer, value_.clicktrend)
    writer.endObject()
  }
}
