// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.alarmfm.radio.`data`.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class LanguageDtoJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<LanguageDto>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "stationcount")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "stationcount")

  override fun toString(): String = buildString(33) {
      append("GeneratedJsonAdapter(").append("LanguageDto").append(')') }

  override fun fromJson(reader: JsonReader): LanguageDto {
    var name: String? = null
    var stationcount: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        1 -> stationcount = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("stationcount",
            "stationcount", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return LanguageDto(
        name = name ?: throw Util.missingProperty("name", "name", reader),
        stationcount = stationcount ?: throw Util.missingProperty("stationcount", "stationcount",
            reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: LanguageDto?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value_.name)
    writer.name("stationcount")
    intAdapter.toJson(writer, value_.stationcount)
    writer.endObject()
  }
}
